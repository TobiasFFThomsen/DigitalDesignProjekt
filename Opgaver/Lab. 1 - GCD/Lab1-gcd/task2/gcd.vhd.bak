-- -----------------------------------------------------------------------------
--
--  Title      :  FSMD implementation of GCD
--             :
--  Developers :  Jens Sparsø, Rasmus Bo Sørensen and Mathias Møller Bruhn
-- 		       :
--  Purpose    :  This is a FSMD (finite state machine with datapath) 
--             :  implementation the GCD circuit
--             :
--  Revision   :  02203 fall 2017 v.4
--
-- -----------------------------------------------------------------------------

LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY gcd IS
    PORT (clk:   IN std_logic;				   -- The clock signal.
          reset: IN std_logic;				   -- Reset the module.
          req:   IN std_logic;				   -- Input operand / Start computation.
          AB:    IN unsigned(15 downto 0);	-- The two operands.
          ack:   OUT std_logic;				   -- Computation is complete.
          C:     OUT unsigned(15 downto 0));	-- The result.
END gcd;

ARCHITECTURE FSMD OF gcd IS

TYPE state_type IS (idle, loadA, loadB, Calc, Disp, ack_a, waitState); -- Input your own state names

SIGNAL reg_a,next_reg_a,next_reg_b,reg_b : unsigned(15 downto 0);

SIGNAL state, next_state : state_type;


BEGIN

-- Combinatoriel logic

CL: PROCESS (req,AB,state,reg_a,reg_b,reset)
BEGIN

   CASE (state) IS
	when idle	=>
		if req = '1' then
			next_state <= loadA;
		else
			next_state <= idle;
		end if;
	
	when loadA	=>
		reg_a <= AB;
		next_state <= ack_a --kan vi evt sål loadA og ack B sammen NB clk
	
	when ack_a	=>
		ack <= '1';
		if req = '0' then
			next_state <= waitState; 
		else
			next_state <= ack_a;
		end if;
		
	when waitState	=>
		if req = '1' then
			next_state <= loadB;
		else
			next_state <= waitState;
		end if;

	when loadB	=>
		reg_a <= AB;
		next_state <= Calc;

	when Calc	=>
		--then some magic happens
		if reg_a = reg_b then 
			c <= reg_a;
			next_state <= Disp;

		elsif reg_a > reg_b then
			reg_a <= reg_a - reg_b;
			next_state <= Calc; -- nødvendigvis ikke nødvendig
		else 
			reg_b <= reg_b - reg_a;
			next_state <= Calc; 
		end if;

	when Disp	=>
		ack <= '1';
		if req = '0' then
			next_state <= idle; 
		else
			next_state <= Disp;
		end if;

   END CASE;
END PROCESS CL;




-- Registers

seq: PROCESS (clk, reset)
BEGIN
	if(reset='1')	then
		state <= idle;
	elsif(clk'event and clk='1') then
		state <= next_state;
	end if;

END PROCESS seq;


END FSMD;
